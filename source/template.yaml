AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO0114) - Solution - Master Template

  Solution to publish an arbitrary number of revision(s) to ADX
  based on a manifest object that contains a reference to all the assets.
Globals:
  Function:
    Timeout: 300
Parameters:
  ManifestBucket:
    Type: String
    Description: S3 Bucket name where the manifest .json files should be uploaded.
  LoggingLevel:
    Type: String
    Description: Minimum logging level to write out to CloudWatch
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
    Default: INFO
  AssetBucket:
    Type: String
    Description: Existing bucket where new assets are added. This bucket is referenced in the manifest file.
  ManifestBucketLoggingBucket:
    Type: String
    Description: Existing bucket to store server access logs associated with the manifest bucket.
  ManifestBucketLoggingPrefix:
    Type: String
    Default: 'adx-publisher-coordinator-logs/'
    Description: Prefix string (including the trailing slash); location for server access logs associated with the manifest bucket.
  AssetsPerRevision:
    Type: String
    Description: Max numbers of assets per ADX dataset revision
    Default: '10000'
Mappings:
  Send:
    AnonymousUsage:
      Data: "Yes"
  SolutionInformation:
    SoltuionDetails:
      Version : "1.0.0"
      Identifier : "SO0114"
Resources:
  SolutionHelper:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SolutionHelper/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          AnonymousUsage : !FindInMap ["Send", "AnonymousUsage", "Data"]
  SolutionUuid:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "SolutionHelper"
          - "Arn"
      CustomAction: "CreateUuid"
  SolutionLifecycle:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "SolutionHelper"
          - "Arn"
      SolutionId: !FindInMap ["SolutionInformation", "SoltuionDetails", "Identifier"]
      UUID: !GetAtt SolutionUuid.UUID
      CustomAction: "LifecycleMetric"
      Version: !FindInMap ["SolutionInformation", "SoltuionDetails", "Version"]
  StartPublishingWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StartPublishingWorkflowFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          STATE_MACHINE_ARN : !Ref PublishRevisionsStepFunction
          LOG_LEVEL : !Ref LoggingLevel
          ASSETS_PER_REVISION : !Ref AssetsPerRevision
      Policies:
        - StepFunctionsExecutionPolicy: 
            StateMachineName: !GetAtt [ PublishRevisionsStepFunction, Name ]
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - S3WritePolicy:
            BucketName:
              !Ref ManifestBucket
      Events:
        RevisionReady:
          Type: S3 
          Properties:
            Bucket: 
              Ref: DeploymentBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
  PrepareRevisionMapInputFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: PrepareRevisionMapInputFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap ["SolutionInformation", "SoltuionDetails", "Version"]
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CreateRevisionAndPrepareJobMapInputFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: CreateRevisionAndPrepareJobMapInputFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap ["SolutionInformation", "SoltuionDetails", "Version"]
          AnonymousUsage : !FindInMap ["Send", "AnonymousUsage", "Data"]
          SolutionId: !FindInMap ["SolutionInformation", "SoltuionDetails", "Identifier"]
          UUID: !GetAtt SolutionUuid.UUID
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CreateAndStartImportJobFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: CreateAndStartImportJobFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap ["SolutionInformation", "SoltuionDetails", "Version"]
          AnonymousUsage : !FindInMap ["Send", "AnonymousUsage", "Data"]
          SolutionId: !FindInMap ["SolutionInformation", "SoltuionDetails", "Identifier"]
          UUID: !GetAtt SolutionUuid.UUID
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CheckJobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckJobStatusFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt [ CheckJobStatusFunctionRole, Arn ]
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
  CheckJobStatusFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement : 
          - Effect : Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ADXGetJobStatus
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action : 
                  - dataexchange:GetJob
                Resource : '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W11"
            reason: "Jobs created at runtime so ARNs will not be known a priori."
  FinalizeAndUpdateCatalogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: FinalizeAndUpdateCatalogFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt [ FinalizeAndUpdateCatalogFunctionRole, Arn ]
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
  FinalizeAndUpdateCatalogFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement : 
          - Effect : Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: MarketplaceActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - dataexchange:UpdateRevision
                  - dataexchange:PublishDataSet
                Resource: '*' 
              - Effect: Allow
                Action: 
                  - aws-marketplace:StartChangeSet
                  - aws-marketplace:DescribeEntity
                  - aws-marketplace:DescribeChangeSet
                Resource: '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:   
          - id: "W11"
            reason: "aws-marketplace:StartChangeSet and aws-marketplace:DescribeEntity do not accept resource level permissions. For dataexchange:UpdateRevision, the revisions are created at runtime and are not known a priori."
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ManifestBucket
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration: 
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref ManifestBucketLoggingBucket
        LogFilePrefix: !Ref ManifestBucketLoggingPrefix
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W51"
            reason: "There is no logical policy to apply."    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ManifestBucket
      PolicyDocument:
        Statement:
        - Sid: HttpsOnly
          Action: '*'
          Effect: Deny
          Resource:
            Fn::Sub: arn:aws:s3:::${DeploymentBucket}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: 'false'
        - Sid: HttpsOnly
          Action: '*'
          Effect: Deny
          Resource:
            Fn::Sub: arn:aws:s3:::${DeploymentBucket}
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  CreateAndStartJobStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Step function workflow to create and start an import job, then check its status until finished",
              "StartAt": "Create and Start Import Job",
              "TimeoutSeconds": 10800,
              "States": {
                "Create and Start Import Job": {
                  "Type": "Task",
                  "Resource": "${createandstartimportjoblambda}",
                  "Next": "WaitProcessing"
                },
                "ChoiceBasedOnStatus": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.JobStatus",
                      "StringEquals": "COMPLETED",
                      "Next": "JobSucceeded"
                    },
                    {
                      "Variable": "$.JobStatus",
                      "StringEquals": "IN_PROGRESS",
                      "Next": "WaitProcessing"
                    },
                    {
                      "Variable": "$.JobStatus",
                      "StringEquals": "ERROR",
                      "Next": "JobFailed"
                    }
                  ]
                },
                "WaitProcessing": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "CheckJobStatus"
                },
                "CheckJobStatus": {
                  "Type" : "Task",
                  "Resource" : "${checkjobstatuslambda}",
                  "Next": "ChoiceBasedOnStatus"
                },
                "JobFailed": {
                  "Type": "Pass",
                  "End": true
                },
                "JobSucceeded": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - {createandstartimportjoblambda: !GetAtt [ CreateAndStartImportJobFunction, Arn ], checkjobstatuslambda: !GetAtt [ CheckJobStatusFunction, Arn ]}
      RoleArn: !GetAtt [ JobSFExecutionRole, Arn ]
  PublishRevisionsStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Step function workflow to coordinate the publication of new assets to one or more dataset revisions",
              "StartAt": "Prepare Revision Map Input",
              "TimeoutSeconds": 10800,
              "States": {
                "Prepare Revision Map Input": {
                  "Type": "Task",
                  "Resource": "${preparerevisionmapinputlambda}",
                  "Next": "Create Revisions"
                },
                "Create Revisions": {
                  "Type": "Map",
                  "End": true,
                  "InputPath": "$",
                  "ItemsPath": "$.RevisionMapInput",
                  "MaxConcurrency": 1,
                  "ResultPath": "$.RevisionDetails1.$",
                  "Parameters": {
                    "RevisionMapIndex.$": "$$.Map.Item.Value",
                    "Bucket.$": "$.Bucket",
                    "Key.$": "$.Key",
                    "ProductId.$": "$.ProductId",
                    "DatasetId.$": "$.DatasetId"
                  },
                  "Iterator": {
                    "StartAt": "Create a Revision and Prepare Import Job Map Input",
                    "States": {
                      "Create a Revision and Prepare Import Job Map Input": {
                        "Type": "Task",
                        "Resource": "${createrevisionandpreparejobmapinputlambda}",
                        "Next": "Create and Start an Import Assets Job"
                      },
                      "Create and Start an Import Assets Job": {
                        "Type": "Map",
                        "Next": "FinalizeAndUpdateCatalog",
                        "InputPath": "$",
                        "ItemsPath": "$.JobMapInput",
                        "MaxConcurrency": 10,
                        "ResultPath": null,
                        "Parameters": {
                          "JobMapIndex.$": "$$.Map.Item.Value",
                          "Bucket.$": "$.Bucket",
                          "Key.$": "$.Key",
                          "ProductId.$": "$.ProductId",
                          "DatasetId.$": "$.DatasetId",
                          "RevisionId.$": "$.RevisionId",
                          "RevisionMapIndex.$": "$.RevisionMapIndex"
                        },
                        "Iterator": {
                          "StartAt": "Create and Start Import Job SFN",
                          "States": {
                            "Create and Start Import Job SFN": {
                              "Type":"Task",
                              "Resource":"arn:aws:states:::states:startExecution.sync:2",
                              "Parameters":{  
                                "StateMachineArn": "${createandstartjonstepfunction}", 
                                "Input": {  
                                  "Comment":"Single ADX import job",
                                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                                  "JobMapIndex.$": "$.JobMapIndex",
                                  "Bucket.$": "$.Bucket",
                                  "Key.$": "$.Key",
                                  "ProductId.$": "$.ProductId",
                                  "DatasetId.$": "$.DatasetId",
                                  "RevisionId.$": "$.RevisionId",
                                  "RevisionMapIndex.$": "$.RevisionMapIndex"
                                }
                              },
                              "Retry": [  
                                {  
                                  "ErrorEquals": [  
                                    "StepFunctions.ExecutionLimitExceeded"
                                  ]
                                }
                              ],
                              "End": true
                            }
                          }
                        }
                      },
                      "FinalizeAndUpdateCatalog": {
                        "Type" : "Task",
                        "Resource" : "${finalizeandupdatecataloglambda}",
                        "End": true
                      }
                    }
                  }
                }
              }
            }
          - {preparerevisionmapinputlambda: !GetAtt [ PrepareRevisionMapInputFunction, Arn ], createrevisionandpreparejobmapinputlambda: !GetAtt [ CreateRevisionAndPrepareJobMapInputFunction, Arn ], createandstartjonstepfunction: !GetAtt [ CreateAndStartJobStepFunction, Arn ], finalizeandupdatecataloglambda: !GetAtt [ FinalizeAndUpdateCatalogFunction, Arn ]}
      RoleArn: !GetAtt [ RevisionSFExecutionRole, Arn ]
  RevisionSFExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt [ PrepareRevisionMapInputFunction, Arn ]
                  - !GetAtt [ CreateRevisionAndPrepareJobMapInputFunction, Arn ]
                  - !GetAtt [ FinalizeAndUpdateCatalogFunction, Arn ]
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                Resource: 
                  - !GetAtt [ CreateAndStartJobStepFunction, Arn ]
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource: 
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
  JobSFExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt [ CreateAndStartImportJobFunction, Arn ]
                  - !GetAtt [ CheckJobStatusFunction, Arn ]
